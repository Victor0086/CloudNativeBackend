# Nombre de la aplicación y puerto del servidor
spring.application.name=ejemplo
server.port=8080
server.address=0.0.0.0

# =============================
# Seguridad con Azure AD B2C
# =============================
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/discovery/v2.0/keys
spring.security.oauth2.resourceserver.jwt.audiences=f836bdc5-14d0-4d55-836f-4ac0bdbb3d08


# =============================
# Logging
# =============================
logging.level.org.springframework.web=DEBUG
logging.level.org.apache.kafka=WARN
logging.level.org.springframework.kafka=INFO
logging.level.org.springframework.kafka.listener=WARN

# =============================
# Configuración de base de datos Oracle (Wallet)
# =============================
spring.datasource.url=jdbc:oracle:thin:@wv80unlymhjzx3g3_high?TNS_ADMIN=/app/wallet
spring.datasource.username=Admin
spring.datasource.password=Raiden..008688
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.hikari.connection-timeout=30000
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# =============================
# RabbitMQ
# =============================
spring.rabbitmq.host=rabbitmq1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.simple.concurrency=1
spring.rabbitmq.listener.simple.prefetch=1
spring.rabbitmq.listener.simple.default-requeue-rejected=true

# =============================
# Kafka (en Docker)
# =============================
spring.kafka.bootstrap-servers=kafka-1:19092,kafka-2:19093,kafka-3:19094
spring.kafka.consumer.bootstrap-servers=kafka-1:19092,kafka-2:19093,kafka-3:19094
spring.kafka.producer.bootstrap-servers=kafka-1:19092,kafka-2:19093,kafka-3:19094

spring.kafka.consumer.group-id=microservicios-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=venta:cl.duoc.azuread.ejemplo.dto.VentaDTO,inventario:cl.duoc.azuread.ejemplo.dto.InventarioDTO,promocion:cl.duoc.azuread.ejemplo.dto.PromocionDTO

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.admin.properties.bootstrap.servers=kafka-1:19092,kafka-2:19093,kafka-3:19094
